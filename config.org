#+TITLE: My custom Emacs config written in org-mode
#+AUTHOR: Reard Gjoni
#+STARTUP: showeverything

[[file:TomBombadil.jpg]]

* Table of contents :toc:
- [[#first-step][First step]]
- [[#important-programs-to-load-first][Important programs to load first]]
  - [[#elpaca-package-manager][Elpaca Package Manager]]
- [[#fonts][Fonts]]
- [[#which-key-package][which-key package]]
- [[#org-mode][org-mode]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#hide-org-indent][Hide org-indent]]
  - [[#org-pomodoro][org-pomodoro]]
- [[#theme][Theme]]
- [[#rainbow-mode][rainbow-mode]]
- [[#icons][Icons]]
- [[#ivy-and-counsel][Ivy and Counsel]]
- [[#buffer-move][buffer-move]]
- [[#shells--terminals][Shells & Terminals]]
  - [[#eshell][eshell]]
- [[#projects][Projects]]
- [[#dashboard][Dashboard]]
- [[#programming-languages-support][Programming languages support]]
- [[#rainbow-delimiters][rainbow-delimiters]]
- [[#diminish][Diminish]]
- [[#complete-anything][complete-anything]]
- [[#neotree][neotree]]
- [[#send-backup-files-to-trash-folder][Send backup files to trash folder]]
- [[#elfeed][elfeed]]
- [[#minibuffer-escape-one-time][Minibuffer escape one time]]
- [[#sane-defaults][Sane defaults]]
- [[#multimedia][Multimedia]]
- [[#touch-typing][Touch typing]]
- [[#chronometer][chronometer]]
- [[#islamic-prayer-times][Islamic prayer times]]

* First step
Copy all the dependencies from the emacs-29-deps folder into the Emacs installation binary folder. Needed for image inline display support on Windows.

* Important programs to load first
** Elpaca Package Manager
Link: https://github.com/progfolio/elpaca

#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.8)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
				:ref nil
				:files (:defaults (:exclude "extensions"))
				:build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
	 (build (expand-file-name "elpaca/" elpaca-builds-directory))
	 (order (cdr elpaca-order))
	 (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
	  (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
		   ((zerop (call-process "git" nil buffer t "clone"
					 (plist-get order :repo) repo)))
		   ((zerop (call-process "git" nil buffer t "checkout"
					 (or (plist-get order :ref) "--"))))
		   (emacs (concat invocation-directory invocation-name))
		   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
					 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
		   ((require 'elpaca))
		   ((elpaca-generate-autoloads "elpaca" repo)))
	      (kill-buffer buffer)
	    (error "%s" (with-current-buffer buffer (buffer-string))))
	((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))
#+end_src

#+begin_src emacs-lisp
  ;; Install use-package support
  (elpaca elpaca-use-package
  ;; Enable :elpaca use-package keyword.
    (elpaca-use-package-mode)
  ;; Assume :elpaca t unless otherwise specified.
    (setq elpaca-use-package-by-default t)
  )

  ;; Block until current queue processed.
  (elpaca-wait)
#+end_src

* Fonts

#+begin_src emacs-lisp
  (set-face-attribute 'default nil
    :font "Red Hat Mono"
    :height 125
    :weight 'medium)
  (set-face-attribute 'variable-pitch nil
    :font "Red Hat Mono"
    :height 120
    :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
    :font "Red Hat Mono"
    :height 120
    :weight 'medium)
  ;; Makes commented text and keywords italics.
  ;; This is working in emacsclient but not emacs.
  ;; Your font must have an italic face available.
  (set-face-attribute 'font-lock-comment-face nil
    :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
    :slant 'italic)

  ;; This sets the default font on all graphical frames created after restarting Emacs.
  ;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
  ;; are not right unless I also add this method of setting the default font.
  (add-to-list 'default-frame-alist '(font . "Red Hat Mono-13"))

  ;; Uncomment the following line if line spacing needs adjusting.
  (setq-default line-spacing 0.12)
#+end_src

* which-key package

#+begin_src emacs-lisp
  (use-package which-key
    :diminish
    :init
      (which-key-mode 1)
    :config
    (setq which-key-side-window-location 'bottom
    which-key-sort-order #'which-key-key-order-alpha
    which-key-sort-uppercase-first nil
    which-key-add-column-padding 1
    which-key-max-display-columns nil
    which-key-min-display-lines 6
    which-key-side-window-slot -10
    which-key-side-window-max-height 0.25
    which-key-idle-delay 0.8
    which-key-max-description-length 25
    which-key-allow-imprecise-window-fit nil
    which-key-separator " â†’ " ))
#+end_src

* org-mode

#+begin_src emacs-lisp
  (setq org-startup-with-inline-images t)
#+end_src

** Enabling Table of Contents

#+begin_src emacs-lisp
  (use-package toc-org
      :commands toc-org-enable
      :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Enabling Org Bullets
Org-bullets gives us attractive bullets rather than asterisks.

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Hide org-indent

#+begin_src emacs-lisp
  (eval-after-load 'org-indent '(diminish 'org-indent-mode))
#+end_src

** org-pomodoro

#+begin_src emacs-lisp
  (use-package sound-wav
    :ensure t)

  (use-package powershell
    :ensure t)
#+end_src

#+begin_src emacs-lisp
  (use-package org-pomodoro
     :config
    (setq org-pomodoro-ask-for-notes t)  ;; Ask for notes after each session
    (setq org-pomodoro-log 'note)  ;; Logs a note with each Pomodoro session
    (setq org-pomodoro-finished-sound-p t)  ;; Enables the sound after a Pomodoro session
    (setq org-pomodoro-ticking-sound nil)  ;; Optional: Disable ticking sound if you don't want it
    (setq org-pomodoro-finished-sound "/home/rgj/.emacs.d/pomodoro-bell.wav")
    (setq org-pomodoro-short-break-sound "/home/rgj/.emacs.d/break-over-sound.wav")
    (setq org-pomodoro-long-break-sound "/home/rgj/.emacs.d/break-over-sound.wav")

    ;; Set the default times (optional)
    (setq org-pomodoro-length 50)  ;; Length of each Pomodoro session (in minutes)
    (setq org-pomodoro-short-break-length 10)  ;; Short break (in minutes)
    (setq org-pomodoro-long-break-length 20)  ;; Long break (in minutes)
    (setq org-pomodoro-long-break-frequency 4)  ;; Long break after every 4 sessions

    (setq org-clock-persist 'history)  ;; Saves clock history between Emacs sessions
    (org-clock-persistence-insinuate)  ;; Ensures that your clocks are persisted

    ;; Custom function to dynamically set Pomodoro length
    (defun my/org-pomodoro (length)
    "Start a Pomodoro session with LENGTH in minutes.
     If LENGTH is not provided, use the default value of `org-pomodoro-length`."
    (interactive "nPomodoro length in minutes (default is 50): ")
    (let ((original-length org-pomodoro-length))
      (setq org-pomodoro-length (if (> length 0) length original-length))
      (org-pomodoro)
      (setq org-pomodoro-length original-length))
    )  ;; Restore the default after starting
  )
#+end_src

* Theme

#+begin_src emacs-lisp
  (use-package alect-themes
  :init (progn (load-theme 'alect-light t)
               (load-theme 'alect-dark t)
               (enable-theme 'alect-light))
  :defer t
  :ensure t)
#+end_src

* rainbow-mode
Display the actual color as a background for any hex color value (ex. #ffffff).  The code block below enables rainbow-mode in all programming modes (prog-mode) as well as org-mode, which is why rainbow works in this document.

#+begin_src emacs-lisp
  (use-package rainbow-mode
    :diminish
    :hook
    ((org-mode prog-mode) . rainbow-mode))
#+end_src

* Icons
This is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.

#+begin_src emacs-lisp
      (use-package all-the-icons
        :ensure t
        :if (display-graphic-p))

      (use-package all-the-icons-dired
        :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

* Ivy and Counsel

Ivy, a generic completion mechanism for Emacs.
Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
Ivy-rich allows us to add descriptions alongside the commands in M-x.

#+begin_src emacs-lisp
  (use-package counsel
    :diminish
    :after ivy
    :config (counsel-mode))

  (use-package ivy
    :diminish
    :bind
    ;; ivy-resume resumes the last Ivy-based completion.
    (("C-c C-r" . ivy-resume)
     ("C-x B" . ivy-switch-buffer-other-window))
    :custom
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    :config
    (ivy-mode))

  (use-package all-the-icons-ivy-rich
    :diminish
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))

  (use-package ivy-rich
    :diminish
    :after ivy
    :ensure t
    :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
    :custom
    (ivy-virtual-abbreviate 'full
     ivy-rich-switch-buffer-align-virtual-buffer t
     ivy-rich-path-style 'abbrev)
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer
                                 'ivy-rich-switch-buffer-transformer))

#+end_src

* buffer-move

#+begin_src emacs-lisp
  
;; Copyright (C) 2004-2014  Lucas Bonnet <lucas@rincevent.net.fr>

;; Author: Lucas Bonnet <lucas@rincevent.net>
;; Keywords: lisp,convenience
;; Version: 0.5
;; URL : https://github.com/lukhas/buffer-move

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License
;; as published by the Free Software Foundation; either version 2
;; of the License, or (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program; if not, write to the Free Software
;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
;; 02111-1307, USA.

;;; Commentary:

;; This file is for lazy people wanting to swap buffers without
;; typing C-x b on each window. This is useful when you have :

;; +--------------+-------------+
;; |              |             |
;; |    #emacs    |    #gnus    |
;; |              |             |
;; +--------------+-------------+
;; |                            |
;; |           .emacs           |
;; |                            |
;; +----------------------------+

;; and you want to have :

;; +--------------+-------------+
;; |              |             |
;; |    #gnus     |   .emacs    |
;; |              |             |
;; +--------------+-------------+
;; |                            |
;; |           #emacs           |
;; |                            |
;; +----------------------------+

;; With buffer-move, just go in #gnus, do buf-move-left, go to #emacs
;; (which now should be on top right) and do buf-move-down.

;; To use it, simply put a (require 'buffer-move) in your ~/.emacs and
;; define some keybindings. For example, i use :

;; (global-set-key (kbd "<C-S-up>")     'buf-move-up)
;; (global-set-key (kbd "<C-S-down>")   'buf-move-down)
;; (global-set-key (kbd "<C-S-left>")   'buf-move-left)
;; (global-set-key (kbd "<C-S-right>")  'buf-move-right)


;;; Code:


(require 'windmove)

;;;###autoload
(defun buf-move-up ()
  "Swap the current buffer and the buffer above the split.
If there is no split, ie now window above the current one, an
error is signaled."
;;  "Switches between the current buffer, and the buffer above the
;;  split, if possible."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'up))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No window above this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-down ()
"Swap the current buffer and the buffer under the split.
If there is no split, ie now window under the current one, an
error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'down))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (or (null other-win) 
            (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
        (error "No window under this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-left ()
"Swap the current buffer and the buffer on the left of the split.
If there is no split, ie now window on the left of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'left))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No left split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-right ()
"Swap the current buffer and the buffer on the right of the split.
If there is no split, ie now window on the right of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'right))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No right split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))
#+end_src

* Shells & Terminals
** eshell
Eshell is an Emacs 'shell' that is written in Elisp.

#+begin_src emacs-lisp
(use-package eshell-syntax-highlighting
  :after esh-mode
  :config
  (eshell-syntax-highlighting-global-mode +1))

;; eshell-syntax-highlighting -- adds fish/zsh-like syntax highlighting.
;; eshell-rc-script -- your profile for eshell; like a bashrc for eshell.
;; eshell-aliases-file -- sets an aliases file for the eshell.

(setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
      eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
      eshell-history-size 5000
      eshell-buffer-maximum-lines 5000
      eshell-hist-ignoredups t
      eshell-scroll-to-bottom-on-input t
      eshell-destroy-buffer-when-process-dies t
      eshell-visual-commands'("powershell" "bash" "fish" "htop" "ssh" "top" "zsh"))
#+end_src

* Projects
[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs.

#+begin_src emacs-lisp
  (use-package projectile
    :diminish
    :config
   (projectile-mode 1))
#+end_src

* Dashboard
Emacs Dashboard is an extensible startup screen showing you recent files, bookmarks, agenda items and an Emacs banner.

#+begin_src emacs-lisp
  (use-package dashboard
    :diminish
    :ensure t 
    :init
    (setq initial-buffer-choice 'dashboard-open)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "My GNU Emacs!")
    (setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
    (setq dashboard-center-content nil) ;; set to 't' for centered content
    (setq dashboard-items '((recents . 10)
                            (agenda . 5)
                            (bookmarks . 3)
                            (projects . 10)
                            (registers . 10)))
    :custom
    (dashboard-modify-heading-icons '((recents . "file-text")
                                      (bookmarks . "book")))
    :config
    (dashboard-setup-startup-hook))
#+end_src

* Programming languages support
Emacs has built-in programming language modes for Lisp, Scheme, DSSSL, Ada, ASM, AWK, C, C++, Fortran, Icon, IDL (CORBA), IDLWAVE, Java, Javascript, M4, Makefiles, Metafont, Modula2, Object Pascal, Objective-C, Octave, Pascal, Perl, Pike, PostScript, Prolog, Python, Ruby, Simula, SQL, Tcl, Verilog, and VHDL.  Other languages will require you to install additional modes.

#+begin_src emacs-lisp
  (use-package php-mode)
  (use-package haskell-mode)
  (use-package lua-mode)
#+end_src

* rainbow-delimiters
Adding rainbow coloring to parentheses.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
           (csharp-mode . rainbow-delimiters-mode)
           (clojure-mode . rainbow-delimiters-mode)
           (python-mode . rainbow-delimiters-mode)
           (javascript-mode . rainbow-delimiters-mode)
           (java-mode . rainbow-delimiters-mode)
           (php-mode . rainbow-delimiters-mode)
           (sql-mode . rainbow-delimiters-mode)))
#+end_src

* Diminish
This package implements hiding or abbreviation of the modeline displays (lighters) of minor-modes. With this package installed, you can add ':diminish' to any use-package block to hide that particular mode in the modeline.

#+begin_src emacs-lisp
  (use-package diminish)
#+end_src

* complete-anything
[[https://company-mode.github.io/][Company]] is a text completion framework for Emacs. The name stands for "complete anything". Completion will start automatically after you type a few letters. Use M-n and M-p to select, <return> to complete or <tab> to complete the common part.

#+begin_src emacs-lisp
  (use-package company
    :defer 10
    :diminish
    :custom
    (company-begin-commands '(self-insert-command))
    (company-idle-delay 1)
    (company-minimum-prefix-length 1)
    (company-show-numbers t)
    (company-tooltip-align-annotations 't)
    (global-company-mode t))

  (use-package company-box
    :after company
    :diminish
    :hook (company-mode . company-box-mode))
#+end_src

* neotree
Neotree is a file tree viewer. When you open neotree, it jumps to the current file thanks to neo-smart-open. The neo-window-fixed-size setting makes the neotree width be adjustable. NeoTree provides following themes: classic, ascii, arrow, icons, and nerd. Theme can be configed by setting "two" themes for neo-theme: one for the GUI and one for the terminal.  I like to use 'SPC t' for 'toggle' keybindings, so I have used 'SPC t n' for toggle-neotree.

| COMMAND        | DESCRIPTION                           |
|----------------+---------------------------+------------|
| neotree-toggle | /Toggle neotree/                        |
| neotree-dir    | /Open directory in neotree/             |

#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :config
    (setq neo-smart-open t
          neo-show-hidden-files t
          neo-window-width 40
          neo-window-fixed-size nil
          inhibit-compacting-font-caches t
          projectile-switch-project-action 'neotree-projectile-action) 
          ;; truncate long file names in neotree
          (add-hook 'neo-after-create-hook
             #'(lambda (_)
                 (with-current-buffer (get-buffer neo-buffer-name)
                   (setq truncate-lines t)
                   (setq word-wrap nil)
                   (make-local-variable 'auto-hscroll-mode)
                   (setq auto-hscroll-mode nil)))))

  ;; show hidden files
#+end_src

* Send backup files to trash folder
By default, Emacs creates automatic backups of files in their original directories, such "file.el" and the backup "file.el~". This leads to a lot of clutter, so let's tell Emacs to put all backups that it creates in the =TRASH= directory.

#+begin_src emacs-lisp
  (setq backup-directory-alist '((".*" . "~/emacs-trash-files")))
#+end_src

* elfeed
An RSS newsfeed reader for Emacs. Move through the articles with 'j/k'. Move through the stories with 'CTRL j/k' when in other frame.

#+begin_src emacs-lisp
  ;; Function to fetch full text using curl
  (defun elfeed-fetch-full-text ()
    "Fetch full text for the current Elfeed entry using curl."
    (interactive)
    (let* ((entry-link (elfeed-entry-link elfeed-show-entry))  ;; Get the link of the current entry
           (command (format "curl -s %s" entry-link))  ;; Curl command to fetch the article
           (full-text (shell-command-to-string command)))  ;; Fetch the full text
      (with-current-buffer (get-buffer-create "*elfeed-entry-full*")
        (erase-buffer)
        (insert full-text)
        (shr-render-buffer (current-buffer))
  )))

  (use-package elfeed
    :config
    (setq elfeed-use-curl t)  ;; Use curl to fetch articles
    (setq elfeed-html-render 'html) ;; Use HTML rendering
    (setq elfeed-show-entry-default 'inline)
    (define-key elfeed-show-mode-map (kbd "F") 'elfeed-fetch-full-text)

    (setq elfeed-search-feed-face ":foreground #ffffff :weight bold"
          elfeed-feeds (quote
                         (("https://www.aljazeera.com/xml/rss/all.xml" Aljazeera News)
                          ("https://feeds.bbci.co.uk/news/rss.xml" BBC Top News)
                          ("https://feeds.bbci.co.uk/news/world/rss.xml" BBC World News)
                          ("https://www.reddit.com/r/linux.rss" reddit linux)
                          ("https://www.reddit.com/r/commandline.rss" reddit commandline)
                          ("https://www.reddit.com/r/emacs.rss" reddit emacs)
                          ("https://hackaday.com/blog/feed/" hackaday linux)
                          ("https://opensource.com/feed" opensource linux)
                          ("https://www.techrepublic.com/rssfeeds/topic/open-source/" techrepublic linux)
                          ))))

  (use-package elfeed-goodies
    :init
    (elfeed-goodies/setup)
    :config
    (setq elfeed-goodies/entry-pane-size 0.5))
#+end_src

* Minibuffer escape one time

#+begin_src emacs-lisp
  (global-set-key [escape] 'keyboard-escape-quit)
#+end_src

* Sane defaults
The following settings are simple modes that are enabled (or disabled) so that Emacs functions more like you would expect a proper editor/IDE to function.

#+begin_src emacs-lisp
  (delete-selection-mode 1)    ;; You can select text and delete it by typing.
  ;(electric-indent-mode -1)    ;; Turn off the weird indenting that Emacs does by default.
  (electric-pair-mode 1)       ;; Turns on automatic parens pairing
  (global-auto-revert-mode t)  ;; Automatically show changes if the file has changed
  (global-display-line-numbers-mode 1) ;; Display line numbers
  (global-visual-line-mode t)  ;; Enable truncated lines
  ;(menu-bar-mode -1)           ;; Disable the menu bar 
  ;(scroll-bar-mode -1)         ;; Disable the scroll bar
  ;(tool-bar-mode -1)           ;; Disable the tool bar
  ;(setq org-edit-src-content-indentation 0) ;; Set src block automatic indent to 0 instead of 2.
  (setq display-time-default-load-average nil)
#+end_src

#+begin_src emacs-lisp
    ; Open an empty new tab when creating new tabs.
  (defun open-new-tab-with-neotree ()
    "Open a new tab and display Neotree at the E: drive."
    (interactive)
    (tab-new)  ;; Open a new tab
    (switch-to-buffer "*scratch*")
    (neotree-dir "/run/media/rgj/My Passport/"))  ;; Show Neotree with E: drive

  ;; Rebind C-x t 2 to open the new tab with Neotree
  (global-set-key (kbd "C-x t 2") 'open-new-tab-with-neotree)
#+end_src

* Multimedia

#+begin_src emacs-lisp
  (require 'url)

  (defun vlc-start ()
    "Start VLC with HTTP interface and dummy interface."
    (interactive)
    (start-process "vlc" "*vlc*" "vlc" "-I" "dummy" "--extraintf" "http"
                   "--http-host" "127.0.0.1" "--http-port" "8080"
                   "--http-password" "1234"))

  (defvar vlc-current-file nil
    "The currently playing file in VLC.")

  (defun encode-url (str)
    "URL-encode a string STR for use in a URL."
    ;; Use built-in url-encode-url if available, or just handle spaces
    (let ((encoded (replace-regexp-in-string " " "%20" str))) 
      ;; Encode additional special characters
      (replace-regexp-in-string "&" "%26" 
      (replace-regexp-in-string "?" "%3F" 
      (replace-regexp-in-string "=" "%3D" 
      (replace-regexp-in-string "+" "%2B" encoded))))))

  (defun vlc-play-file (file)
    "Play a media FILE using VLC."
    (interactive (list (read-file-name "Select file: " "/run/media/rgj/My Passport/data/audio/")))
    (let* ((encoded-file (encode-url (expand-file-name file)))
           (short-title (if (> (length (file-name-nondirectory file)) 10)
                            (concat (substring (file-name-nondirectory file) 0 15) "...") ; Get first 10 characters
                          (file-name-nondirectory file)))) ; If it's 10 characters or less, use the full name
      (setq vlc-current-file short-title) ; Update the currently playing file variable
                                          ; (message "Playing file with URL: %s" (format "http://localhost:8080/requests/status.xml?command=in_play&input=file:///%s" encoded-file))
      (start-process "curl" nil "curl" "-u" ":1234" (format "http://localhost:8080/requests/status.xml?command=in_play&input=file:///%s" encoded-file))
      (update-vlc-mode-line)
  ))

  (defun update-vlc-mode-line ()
    (let ((new-info (if vlc-current-file
                        (format "â–¶ %s" vlc-current-file)
                      "")))
      ;; Replace the last entry in mode-line-format with the new VLC info
      (setf (nth (1- (length mode-line-format)) mode-line-format) new-info)))

  (defun vlc-pause ()
    (interactive)
    (shell-command "curl --user :1234 http://localhost:8080/requests/status.xml?command=pl_pause"))

  (defun vlc-resume ()
    (interactive)
    (shell-command "curl --user :1234 http://localhost:8080/requests/status.xml?command=pl_play"))

  (defun vlc-stop ()
    (interactive)
    (setq vlc-current-file nil) ;; Clear the current file info
    (shell-command "curl --user :1234 http://localhost:8080/requests/status.xml?command=pl_stop")
    (update-vlc-mode-line)
  )

  (defun vlc-volume (level)
    "Set VLC volume to LEVEL (0-512)."
    (interactive "nVolume Level (0-512): ")
    (let ((url (format "http://localhost:8080/requests/status.xml?command=volume&val=%d" level)))
      (start-process "curl" "*curl*" "curl" "-u" ":1234" url)))

  (defun vlc-status ()
    "Get the current status of VLC."
    (interactive)
    (let ((url "http://localhost:8080/requests/status.xml"))
      (start-process "curl" "*curl*" "curl" "-u" ":1234" url)))

  (defvar vlc-mode-map (make-sparse-keymap)
    "Keymap for VLC commands.")

  (define-key vlc-mode-map (kbd "p") 'vlc-play-file)
  (define-key vlc-mode-map (kbd "s") 'vlc-stop)
  (define-key vlc-mode-map (kbd "P") 'vlc-pause)
  (define-key vlc-mode-map (kbd "r") 'vlc-resume)
  (define-key vlc-mode-map (kbd "v") 'vlc-volume)
  (define-key vlc-mode-map (kbd "S") 'vlc-status)
  (define-key vlc-mode-map (kbd "l") 'vlc-start)

  ;; Bind the prefix to a global key
  (global-set-key (kbd "C-c") vlc-mode-map)
#+end_src

* Touch typing

#+begin_src emacs-lisp
  ;; Run 'speed-type-text'
  (use-package speed-type)
#+end_src

* chronometer

#+begin_src emacs-lisp
  ;; Link: https://github.com/marcelotoledo/chronometer
  ;; Run 'chronometer'
  (use-package chronometer)
#+end_src

* Islamic prayer times

#+begin_src emacs-lisp
  (defun show-prayer-times ()
  "Run the PowerShell Prayer Times script and display the output."
  (interactive)
  (let* ((script-path "/home/rgj/Powershell-Prayer-Times/Powershell_Prayer_Times.ps1") ;; Update this path if necessary
         (output-buffer (get-buffer-create "*Prayer Times Output*"))
         (output (shell-command-to-string (concat "pwsh -ExecutionPolicy Bypass -File " script-path))))
    (with-current-buffer output-buffer
      (erase-buffer) ;; Clear the buffer
      (insert output) ;; Insert the output of the script
      (goto-char (point-min))) ;; Move to the beginning of the buffer
    (display-buffer output-buffer))) ;; Show the buffer
#+end_src











